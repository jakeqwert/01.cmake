# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/C++.gitlab-ci.yml

# use the official gcc image, based on debian
# can use versions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/
#image: gcc
#  docker pull ubuntu:bionic
image: ubuntu:bionic

#  для последовательной работы задач, добавим stages стадии сборок
stages:      # стадии сборок
  - build
  - deploy

before_script:      # перед каждым job
  - echo "Hello"
#  - CHCP 65001                # установим кодировку страницы в utf-8 for Win only

build:  # задачи, название задачи
  # instead of calling g++ directly you can also use some build toolkit like make
  # install the necessary build tools when needed
  # autoconf g++
  before_script:
    - apt-get update && apt-get -y install file build-essential cmake libboost-test-dev libspdlog-dev

  stage: build  # связываем задачу со стадией stages  build
#   only:          # только для заданной ветки
#     refs:
#       - develop  # ветка репозитория, команда будет выполняться на этой ветки (при коммите в нее)
  tags:         # на каких раннерах будет запускаться (с метками)
    - docker
  script:
#    - g++ helloworld.cpp -o mybinary
    - cmake .
    - cmake --build .
    - cmake --build . --target test
    - cmake --build . --target package
  artifacts: # подключаем артефакт
             # подцепим/заберем к GitLab CI отчеты полученные после выполнения задачи
#    untracked: true #для добавления всех неотслеживаемых файлов Git в качестве артефактов (вместе с путями, определенными в artifacts:paths)
    paths:     # прикрепляем как обычные файлы
#      - mybinary
      # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
      # cache:
      #   paths:
      #     - "*.o"
#      - /builds/root/01.cmake/CMakeFiles/CMakeOutput.log
#      - /builds/root/01.cmake/CMakeFiles/CMakeError.log
#      - /builds/root/01.cmake/*-Linux.deb
      - ${CI_PROJECT_DIR}   # /builds/root/01.cmake
    expire_in: 1 week

  cache:
    key: build-cache
    paths:
      - ${CI_PROJECT_DIR}   # /builds/root/01.cmake

#See also "/builds/root/01.cmake/CMakeFiles/CMakeOutput.log".
#See also "/builds/root/01.cmake/CMakeFiles/CMakeError.log".

# run tests using the binary built before
#test:
#  stage: test
#  script:
#    - ./runmytests.sh



deploy1:
  before_script:
#    - apt-get update && apt-get -y install curl
    - echo ${CI_PROJECT_DIR} #/home/gitlab-runner/builds/ptG68v6S/0/root/01.cmake  # /builds/root/01.cmake
    - echo $CI_REGISTRY
    - echo $CI_PROJECT_PATH  # root/01.cmake
    - echo $CI_COMMIT_REF_SLUG  # master
    - echo $CI_BUILD_REF     # 6bf534881620ee9016d6fdbee778d0b5786dc900
  stage: deploy
#  when: always  # будет выполнен вне зависимости от результатов выполнения предыдущих этапов
#  variables:
#    GIT_STRATEGY: none    # чтобы отключить стандартное поведение GitLab CI, очищать локальный репозиторий от всех изменений сделанных предыдущими задачами,
#    # у нас не будет созданной программы из предыдущего этапа build
#    # отключит очистку локального репозитория в котором происходит сборка

#  allow_failure: true      # если у данной задачи были ошибки, сборочная линии продожит выполнять следующие задачи, не упав на этой
  tags:
    - shell
  needs:
    - build
  dependencies:
    - build
  script:
#    - echo "Do your deploy here"
#    - curl -f -T cmake-0.0.$TRAVIS_BUILD_NUMBER-Linux.deb -ushebdim:${BINTRAY_API_KEY} "https://api.bintray.com/content/shebdim/otus-cpp/homework/$TRAVIS_BUILD_NUMBER/cmake-0.0.$TRAVIS_BUILD_NUMBER-Linux.deb;deb_distribution=xenial;deb_component=main;deb_architecture=amd64;publish=1"
#    - curl -f -T cmake-0.0.$TRAVIS_BUILD_NUMBER-Linux.deb -ueliseevz@mail.ru:${BINTRAY_API_KEY} -XPUT "https://jakekobra.jfrog.io/artifactory/study-cpp/homework/$TRAVIS_BUILD_NUMBER/helloworld_project-0.0.$TRAVIS_BUILD_NUMBER-Linux.deb;deb.distribution=xenial;deb.component=main;deb.architecture=amd64;publish=1"

#    - curl -f -T cmake-0.0.${PROJECT_VERSION_PATCH}-Linux.deb -ueliseevz@mail.ru:${BINTRAY_API_KEY} -XPUT "https://jakekobra.jfrog.io/artifactory/study-cpp/homework/$TRAVIS_BUILD_NUMBER/helloworld_project-0.0.$TRAVIS_BUILD_NUMBER-Linux.deb;deb.distribution=xenial;deb.component=main;deb.architecture=amd64;publish=1"
#     - curl -f -T cmake-..11-Linux.deb -ueliseevz@mail.ru:$BINTRAY_API_KEY} -XPUT "https://jakekobra.jfrog.io/artifactory/study-cpp/homework/11/cmake-..11-Linux.deb;deb.distribution=xenial;deb.component=main;deb.architecture=amd64;publish=1"
#    - echo ${BINTRAY_API_KEY}
      # AKCp8mYoSZrj8RTqJJPi7WZxmFf1f9wxnCajpMaKLA9YZpVs4vLF4ijJy9rXiwQuo2BAGuSyg
#    - echo ${PROJECT_VERSION_PATCH}
    - echo $env:CI_PROJECT_DIR
    - echo $env:CI_BUILD_ID
    - curl -f -T cmake-..11-Linux.deb -ueliseevz@mail.ru:${BINTRAY_API_KEY} -XPUT "https://jakekobra.jfrog.io/artifactory/study-cpp/homework/11/cmake-..11-Linux.deb;deb.distribution=xenial;deb.component=main;deb.architecture=amd64;publish=1"


#  only:         # шаг будет выполняться для веток branch develop и docker
#    - develop
#    - docker
  cache:
    key: build-cache
    paths:
      - ${CI_PROJECT_DIR}   # /builds/root/01.cmake
